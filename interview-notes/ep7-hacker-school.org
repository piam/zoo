* Steps for Hangout on Air
+ Visit https://plus.google.com/hangouts/onair
+ Start a Hangout on Air (button)
+ Copy and paste the URL that shows (minus the cruft at the end) to share with other guests
  + May want to setup with Cameraman and Control Room (and Toolbox) first
+ Tweet that it's starting and URL!
* TODO People to notify of URL
+ Dutch Meyer <hotcha@gmail.com>
+ Will Byrd
+ Jeff Forbes <thejrnf@gmail.com>
* TODO HS Intro
Nicholas Bergson-Shilcock is one of the founders of Hacker School and
a life-long unschooler.

Mary Rose Cook writes code, makes music, works at Hacker School and
lives in New York City.  She's spoken at JSConf and Strange Loop.
Recently, She wrote a toy Lisp interpreter, a toy implementation of
Git, a music synth for the iPad in ClojureScript and a micro framework
for JavaScript games.
* TODO Targeted Questions
+ Social rules in the "manual": No feigning surprise, No well-actually's, No back-seat driving, No subtle -isms
  + Can you tell us a little bit about the social rules at Hacker
    School?  Maybe why they're there and what one that stands out for
    you is?
  + In my traditional school format at UBC, what would you recommend I
    import from the "social rules"?
  + How do you keep these social rules positive experiences for
    everyone involved?
+ Hacker School seems very project oriented and yet there's a
  tremendous amount of first-hand exploration of theory and research.
  How do you integrate those two sides for the students?
+ What are those flags or capes behind you?
+ What could a "traditional" educational environment productively
  import from Hacker School?
  + Follow-on: With minimal effort?  (For example, the social rules
    seem like something we could at least advertise.)
+ Is there a goal in HS's "lifecycle" that represents "success"?
* Question Pool
+ Regular: Describe a teacher you've had that you admired and what you admired about them.
+ Regular: What's something you think every CSists should read, learn, do, or play with?

+ How do you establish the atmosphere of the course, where people are engaged, excited, and willing to take changes?
  + How do you fix the atmosphere in a course that's gone awry?
+ What's the most interesting non-CS teaching experience you've had? What did you learn from it?
  + What's something you're a student of now? What does your experience as a student tell you about teaching?
  + How have those experiences informed your teaching in CS?
+ How do you share your excitement about Computer Science with people outside the field?
+ What's your favorite computing story?
+ What's exciting to you in education that you have tried?
+ What's something we really don't need to know about CS anymore that's in our curricula?
+ How should CS reach out to the public?
** Secondary question pool
+ What's a course you wish you could teach?
+ What tips do you have for successfully teaching a large class (100+ people)?
+ What tips do you have for successfully teaching a small class (10- people)?
+ What's something cool you do in your teaching?
+ What do you do to prepare before a course starts?
+ How do you get to know your students?
+ How do you assess your students?
+ What do you do in lecture/class?
+ What's exciting that you haven't tried?
+ How do you identify and help students who are struggling?
+ How do you help students who are enthusiastic for extra work?
+ How do you keep a course fresh when you teach it multiple times?
+ How do you handle challenging students?
+ How do you manage TAs, both so that the basic needs of the course are met and so that those willing are inspired and able to go above and beyond?
+ How do you manage the classroom environment, particularly cell phones, laptops, and other distracting devices?
+ How do you get people to participate in class discussions?
+ How do you answer questions ("good" questions, "dumb" questions, etc.)?
+ What's something every Computer Scientist should know that's not in our curricula?
+ Tell us about something you tried in your teaching that went horribly awry.
+ Do you have topics where your own interest flags? What do you do?
+ What's something that students consistently have trouble learning in your courses? How do you address it?
+ What do you do for students who REALLY want some topic but your school just doesn't do it?
* Actual Questions
+ How did Hacker School start?
+ How does HS relate to Unschooling?
+ How does livecoding fit with the idea of "real software" that is
  retained?
+ What is the environment like in Hacker School, and what have you
  developed to encourage the style of learning?
+ What can we do in our programs that would take advantage of things
  you've learned from Hacker School? (ABORTED)
+ What have you learned from running HS?
+ Favorite HS piece you'd import into traditional program?
  + Mary: Interact to discuss a project
  + Nick
    + Social rules; challenge implementing: those who come to HS
      already buy the rules
    + More emphasis on code quality; code reviews
      + HSers made a "code-review Thursday"
    + Self-direction and learning for the sake of learning
      + Removing the "proxies" (the targets that aren't the actual
        target of learning)
** Shout-outs
+ Hacker School
+ Unschooling
+ Isla
+ Livecoding
+ HS co-founders: Sonali, Dave
+ Space Invaders at presentation in Warsaw
  + emacs
  + JavaScript
+ Pair programming
+ Hacker School social rules
+ Scrum, Stand-up meeting
+ Git
+ Intro CS course has adopted HS social rules (Carleton?)
+ Code reviews
** Terminology
* TODO list for next time
+ With multiple collocated people we really need one speaker and two
  head-based mics.  (Quality is too low with the external mike.)
+ Refer back to Nick's comment that "fear is a large part of.." at ~20
  minutes in.
* TODO Shout-out stuff

Starting at the beginning, we ha da social rule (cutoff).
